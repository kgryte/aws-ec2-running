#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' ),
	path = require( 'path' ),
	pkginfo = require( 'pkginfo' ),
	parseArgs = require( 'minimist' ),
	isArray = require( 'validate.io-array' ),
	opts = require( './opts.json' );


// VARIABLES //

var SIGTERM = 128 + 15,
	SIGINT = 128 + 2,
	SIGHUP = 128 + 1,
	query,
	args,
	pkg,
	len,
	tag,
	i;


// FUNCTIONS //

/**
* FUNCTION: onClose()
*	Callback invoked upon writing a file to `stdout`.
*
* @private
*/
function onClose() {
	process.exit( 1 );
}

/**
* FUNCTION: onError( evt )
*	Event listener invoked when a query instance emits an `error`.
*
* @private
* @param {Object} evt - error event object
*/
function onError( evt ) {
	console.error( evt );
}

/**
* FUNCTION: onData( evt )
*	Event listener invoked upon receiving data from an endpoint. Writes the data to `stdout`.
*
* @private
* @param {Object} evt - data event object
*/
function onData( evt ) {
	process.stdout.write( JSON.stringify( evt.data ) );
}

/**
* FUNCTION: sigterm()
*	Callback invoked upon the process receiving a SIGTERM signal.
*
* @private
*/
function sigterm() {
	cleanup( onCleanup( SIGTERM ) );
}

/**
* FUNCTION: sigint()
*	Callback invoked upon the process receiving a SIGINT signal.
*
* @private
*/
function sigint() {
	cleanup( onCleanup( SIGINT ) );
}

/**
* FUNCTION: sighup()
*	Callback invoked upon the process receiving a SIGHUP signal.
*
* @private
*/
function sighup() {
	cleanup( onCleanup( SIGHUP ) );
}

/**
* FUNCTION: cleanup( clbk )
*	Performs any cleanup tasks before the process exits.
*
* @private
* @param {Function} clbk - callback to invoke once cleanup tasks are finished
*/
function cleanup( clbk ) {
	query.stop();
	if ( query.pending ) {
		query.on( 'pending', onPending );
	} else {
		clbk();
	}
	function onPending( count ) {
		if ( count === 0 ) {
			clbk();
		}
	}
}

/**
* FUNCTION: onCleanup( code )
*	Encloses an exit code and returns a callback.
*
* @private
* @param {Number} code - exit code
* @returns {Function} callback
*/
function onCleanup( code ) {
	/**
	* FUNCTION: done()
	*	Callback invoked once cleanup tasks are complete. Exits the process.
	*
	* @private
	*/
	return function done() {
		process.exit( code );
	};
}


// INIT //

process.stdout.on( 'error', process.exit );


// PACKAGE INFO //

pkg = pkginfo.read( require.main );
process.title = pkg.package.name;


// ARGUMENTS //

args = parseArgs( process.argv.slice( 2 ), opts );


// HELP //

if ( args.help ) {
	fs.createReadStream( path.join( __dirname, 'usage.txt' ) )
		.pipe( process.stdout )
		.on( 'close', onClose );
    return;
}


// VERSION //

if ( args.version ) {
	console.log( require( './../package.json' ).version );
	return;
}


// QUERY //

opts = require( './defaults.json' );

// Access keys...
if ( args.key ) {
	opts.key = args.key;
}
else if ( process.env.AWS_ACCESS_KEY ) {
	opts.key = process.env.AWS_ACCESS_KEY;
}
if ( args.secret ) {
	opts.secret = args.secret;
}
else if ( process.env.AWS_ACCESS_SECRET ) {
	opts.secret = process.env.AWS_ACCESS_SECRET;
}
// Region option...
if ( args.region ) {
	opts.region = args.region;
}
// Poll interval...
if ( args.interval ) {
	opts.interval = parseFloat( args.interval );
}
// Instance tags...
if ( args.tag ) {
	if ( !isArray( args.tag ) ) {
		args.tag = [ args.tag ];
	}
	len = args.tag.length;
	opts.tags = new Array( len );
	for ( i = 0; i < len; i++ ) {
		tag = args.tag[ i ].split( '=' );
		opts.tags[ i ] = {
			'key': tag.shift(), // tag key is assumed to be free of '=' symbols
			'value': tag.join( '=' ) // tag value may contain '=' symbols
		};
	}
}
// Create a new query instance:
query = require( './../lib' )( opts );

// Add event listeners:
query.on( 'error', onError );
query.on( 'data', onData );

// Only add signal listeners if we are polling...
if ( opts.interval ) {
	process.on( 'SIGTERM', sigterm );
	process.on( 'SIGINT', sigint );
	process.on( 'SIGHUP', sighup );
}


